-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encode_upzero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dlt : IN STD_LOGIC_VECTOR (31 downto 0);
    dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce0 : OUT STD_LOGIC;
    dlti_we0 : OUT STD_LOGIC;
    dlti_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dlti_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce1 : OUT STD_LOGIC;
    dlti_we1 : OUT STD_LOGIC;
    dlti_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dlti_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bli_ce0 : OUT STD_LOGIC;
    bli_we0 : OUT STD_LOGIC;
    bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of encode_upzero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_64 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal dlti_addr_gep_fu_56_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_reg_310 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_320 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_fu_188_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal exitcond_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bli_addr_1_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_fu_206_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_346 : STD_LOGIC_VECTOR (2 downto 0);
    signal bli_addr_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dlti_addr_1_gep_fu_95_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_1_reg_356 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_3_gep_fu_104_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_3_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal tmp_61_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_158 : BOOLEAN;
    signal dlti_load_2_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal dlti_addr_4_gep_fu_116_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_4_reg_383 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_5_gep_fu_125_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_5_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_load_4_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_143 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal i_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal tmp_44_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_217 : BOOLEAN;
    signal tmp_48_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl1_fu_245_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_57_cast_fu_241_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_47_fu_253_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd2_cast_cast_fu_234_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd3_fu_259_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_280_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_49_cast_fu_276_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_42_fu_288_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_221_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component encode_mul_32s_32s_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    encode_mul_32s_32s_64_3_U1 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        din1 => grp_fu_221_p1,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_143 assign process. --
    i_1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_172_p2 = ap_const_lv1_0))) then 
                i_1_reg_143 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_1_reg_143 <= i_5_reg_328;
            end if; 
        end if;
    end process;

    -- i_reg_154 assign process. --
    i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_172_p2 = ap_const_lv1_0)))) then 
                i_reg_154 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                i_reg_154 <= i_4_reg_346;
            end if; 
        end if;
    end process;

    -- reg_165 assign process. --
    reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                reg_165 <= dlti_q1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
                reg_165 <= dlti_q0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_316 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_182_p2))) then
                bli_addr_1_reg_338 <= tmp_44_fu_194_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_316 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_200_p2))) then
                bli_addr_reg_351 <= tmp_41_fu_212_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                dlti_load_2_reg_378 <= dlti_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                dlti_load_4_reg_393 <= dlti_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_316 = ap_const_lv1_0)))) then
                i_4_reg_346 <= i_4_fu_206_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_316 = ap_const_lv1_0))) then
                i_5_reg_328 <= i_5_fu_188_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_61_reg_373 <= grp_fu_221_p2(63 downto 63);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_316 <= tmp_fu_172_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_172_p2 = ap_const_lv1_0))) then
                tmp_s_reg_320 <= tmp_s_fu_178_p1;
            end if;
        end if;
    end process;
    dlti_addr_reg_310(2 downto 0) <= "000";
    dlti_addr_1_reg_356(2 downto 0) <= "100";
    dlti_addr_3_reg_362(2 downto 0) <= "011";
    dlti_addr_4_reg_383(2 downto 0) <= "010";
    dlti_addr_5_reg_388(2 downto 0) <= "001";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_reg_316, exitcond_fu_182_p2, exitcond1_fu_200_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((tmp_reg_316 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_200_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                elsif ((((tmp_reg_316 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_182_p2))) or (not((tmp_reg_316 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_200_p2))))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_158 assign process. --
    ap_sig_bdd_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_158 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_217 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_64 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_217)
    begin
        if (ap_sig_bdd_217) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_64)
    begin
        if (ap_sig_bdd_64) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_158)
    begin
        if (ap_sig_bdd_158) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- bli_address0 assign process. --
    bli_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, bli_addr_1_reg_338, bli_addr_reg_351, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, tmp_41_fu_212_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            bli_address0 <= bli_addr_reg_351;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            bli_address0 <= bli_addr_1_reg_338;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            bli_address0 <= tmp_41_fu_212_p1(3 - 1 downto 0);
        else 
            bli_address0 <= "XXX";
        end if; 
    end process;


    -- bli_ce0 assign process. --
    bli_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            bli_ce0 <= ap_const_logic_1;
        else 
            bli_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- bli_d0 assign process. --
    bli_d0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, tmp_48_fu_269_p2, tmp_42_fu_288_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            bli_d0 <= tmp_42_fu_288_p2(39 downto 8);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            bli_d0 <= tmp_48_fu_269_p2;
        else 
            bli_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- bli_we0 assign process. --
    bli_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            bli_we0 <= ap_const_logic_1;
        else 
            bli_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_addr_1_gep_fu_95_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    dlti_addr_3_gep_fu_104_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    dlti_addr_4_gep_fu_116_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    dlti_addr_5_gep_fu_125_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    dlti_addr_gep_fu_56_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- dlti_address0 assign process. --
    dlti_address0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, dlti_addr_reg_310, tmp_reg_316, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_182_p2, exitcond1_fu_200_p2, dlti_addr_3_reg_362, dlti_addr_5_reg_388, tmp_44_fu_194_p1, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            dlti_address0 <= dlti_addr_5_reg_388;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            dlti_address0 <= dlti_addr_3_reg_362;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            dlti_address0 <= dlti_addr_reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            dlti_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (((tmp_reg_316 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_182_p2))) or (not((tmp_reg_316 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_200_p2)))))) then 
            dlti_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_316 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_182_p2))) then 
            dlti_address0 <= tmp_44_fu_194_p1(3 - 1 downto 0);
        else 
            dlti_address0 <= "XXX";
        end if; 
    end process;


    -- dlti_address1 assign process. --
    dlti_address1_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, dlti_addr_reg_310, ap_sig_cseq_ST_st2_fsm_1, dlti_addr_1_reg_356, dlti_addr_4_reg_383, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            dlti_address1 <= dlti_addr_reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            dlti_address1 <= dlti_addr_4_reg_383;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            dlti_address1 <= dlti_addr_1_reg_356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            dlti_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            dlti_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            dlti_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        else 
            dlti_address1 <= "XXX";
        end if; 
    end process;


    -- dlti_ce0 assign process. --
    dlti_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, tmp_reg_316, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_182_p2, exitcond1_fu_200_p2, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_316 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_182_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (((tmp_reg_316 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_182_p2))) or (not((tmp_reg_316 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_200_p2))))) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            dlti_ce0 <= ap_const_logic_1;
        else 
            dlti_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- dlti_ce1 assign process. --
    dlti_ce1_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            dlti_ce1 <= ap_const_logic_1;
        else 
            dlti_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_d0 <= reg_165;

    -- dlti_d1 assign process. --
    dlti_d1_assign_proc : process(dlt, reg_165, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, dlti_load_2_reg_378, dlti_load_4_reg_393, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            dlti_d1 <= dlt;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            dlti_d1 <= dlti_load_4_reg_393;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            dlti_d1 <= dlti_load_2_reg_378;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            dlti_d1 <= reg_165;
        else 
            dlti_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- dlti_we0 assign process. --
    dlti_we0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            dlti_we0 <= ap_const_logic_1;
        else 
            dlti_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- dlti_we1 assign process. --
    dlti_we1_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            dlti_we1 <= ap_const_logic_1;
        else 
            dlti_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_200_p2 <= "1" when (i_reg_154 = ap_const_lv3_6) else "0";
    exitcond_fu_182_p2 <= "1" when (i_1_reg_143 = ap_const_lv3_6) else "0";
    grp_fu_221_ce <= ap_const_logic_1;
    grp_fu_221_p0 <= tmp_s_reg_320(32 - 1 downto 0);
    grp_fu_221_p1 <= reg_165;
    i_4_fu_206_p2 <= std_logic_vector(unsigned(i_reg_154) + unsigned(ap_const_lv3_1));
    i_5_fu_188_p2 <= std_logic_vector(unsigned(i_1_reg_143) + unsigned(ap_const_lv3_1));
    p_shl1_fu_245_p3 <= (bli_q0 & ap_const_lv8_0);
    p_shl_fu_280_p3 <= (bli_q0 & ap_const_lv8_0);
    tmp_41_fu_212_p1 <= std_logic_vector(resize(unsigned(i_reg_154),64));
    tmp_42_fu_288_p2 <= std_logic_vector(unsigned(p_shl_fu_280_p3) - unsigned(tmp_49_cast_fu_276_p1));
    tmp_44_fu_194_p1 <= std_logic_vector(resize(unsigned(i_1_reg_143),64));
    tmp_47_fu_253_p2 <= std_logic_vector(unsigned(p_shl1_fu_245_p3) - unsigned(tmp_57_cast_fu_241_p1));
    tmp_48_fu_269_p2 <= std_logic_vector(unsigned(wd2_cast_cast_fu_234_p3) + unsigned(wd3_fu_259_p4));
        tmp_49_cast_fu_276_p1 <= std_logic_vector(resize(signed(bli_q0),40));

        tmp_57_cast_fu_241_p1 <= std_logic_vector(resize(signed(bli_q0),40));

    tmp_fu_172_p2 <= "1" when (dlt = ap_const_lv32_0) else "0";
        tmp_s_fu_178_p1 <= std_logic_vector(resize(signed(dlt),64));

    wd2_cast_cast_fu_234_p3 <= 
        ap_const_lv32_FFFFFF80 when (tmp_61_reg_373(0) = '1') else 
        ap_const_lv32_80;
    wd3_fu_259_p4 <= tmp_47_fu_253_p2(39 downto 8);
end behav;
