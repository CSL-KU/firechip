-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xin1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of encode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encode,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.710000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=70,HLS_SYN_FF=3017,HLS_SYN_LUT=3273}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv39_7FFFFFFFD4 : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_4800 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100100000000000";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv29_1FFFFF80 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111110000000";
    constant ap_const_lv29_80 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_const_lv32_3000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_FFFFFF40 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111101000000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FFFFD000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101000000000000";
    constant ap_const_lv15_5000 : STD_LOGIC_VECTOR (14 downto 0) := "101000000000000";
    constant ap_const_lv15_3C00 : STD_LOGIC_VECTOR (14 downto 0) := "011110000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv42_234 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000110100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FFFFE310 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110001100010000";
    constant ap_const_lv32_FFFFF9B0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111100110110000";
    constant ap_const_lv32_1CF0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110011110000";
    constant ap_const_lv32_650 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011001010000";
    constant ap_const_lv32_31E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011110";
    constant ap_const_lv32_FFFFFF2A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111100101010";
    constant ap_const_lv31_5800 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000101100000000000";
    constant ap_const_lv15_5800 : STD_LOGIC_VECTOR (14 downto 0) := "101100000000000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal tqmf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tqmf_ce0 : STD_LOGIC;
    signal tqmf_we0 : STD_LOGIC;
    signal tqmf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tqmf_ce1 : STD_LOGIC;
    signal tqmf_we1 : STD_LOGIC;
    signal tqmf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_ce1 : STD_LOGIC;
    signal h_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal delay_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bpl_ce0 : STD_LOGIC;
    signal delay_bpl_we0 : STD_LOGIC;
    signal delay_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dltx_ce0 : STD_LOGIC;
    signal delay_dltx_we0 : STD_LOGIC;
    signal delay_dltx_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dltx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dltx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dltx_ce1 : STD_LOGIC;
    signal delay_dltx_we1 : STD_LOGIC;
    signal delay_dltx_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dltx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rlt1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal al1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rlt2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal al2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sl : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal detl : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal decis_levl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal decis_levl_ce0 : STD_LOGIC;
    signal decis_levl_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal quant26bt_pos_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_pos_ce0 : STD_LOGIC;
    signal quant26bt_pos_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal quant26bt_neg_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_neg_ce0 : STD_LOGIC;
    signal quant26bt_neg_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal il : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal qq4_code4_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal qq4_code4_table_ce0 : STD_LOGIC;
    signal qq4_code4_table_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dlt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal nbl : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wl_code_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal wl_code_table_ce0 : STD_LOGIC;
    signal wl_code_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ilb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ilb_table_ce0 : STD_LOGIC;
    signal ilb_table_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal plt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal plt1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal plt2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal delay_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bph_ce0 : STD_LOGIC;
    signal delay_bph_we0 : STD_LOGIC;
    signal delay_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_bph_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dhx_ce0 : STD_LOGIC;
    signal delay_dhx_we0 : STD_LOGIC;
    signal delay_dhx_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dhx_ce1 : STD_LOGIC;
    signal delay_dhx_we1 : STD_LOGIC;
    signal delay_dhx_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rh1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ah1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rh2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ah2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ih : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal deth : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal nbh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_237 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_244 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_252 : BOOLEAN;
    signal reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_261 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_268 : BOOLEAN;
    signal reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_278 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_285 : BOOLEAN;
    signal reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_296 : BOOLEAN;
    signal xa_cast_fu_734_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb_cast_fu_748_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_311 : BOOLEAN;
    signal i_2_fu_764_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_2676 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_782_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal phitmp_reg_2691 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_load_reg_2696 : STD_LOGIC_VECTOR (14 downto 0);
    signal tqmf_ptr_load_reg_2701 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_ptr_load_reg_2706 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_795_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_2_reg_2711 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_337 : BOOLEAN;
    signal tmp_s_fu_807_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_s_reg_2716 : STD_LOGIC_VECTOR (45 downto 0);
    signal xa_2_fu_816_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_348 : BOOLEAN;
    signal xb_2_fu_825_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xa_1_cast1_fu_851_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal xa_1_cast1_reg_2731 : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_359 : BOOLEAN;
    signal tmp_fu_855_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_reg_2736 : STD_LOGIC_VECTOR (46 downto 0);
    signal xb_1_cast1_fu_899_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal xb_1_cast1_reg_2741 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_3_fu_903_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_3_reg_2746 : STD_LOGIC_VECTOR (46 downto 0);
    signal tqmf_addr_2_reg_2751 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_374 : BOOLEAN;
    signal tqmf_ptr1_0_rec_fu_922_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tqmf_ptr1_0_rec_reg_2756 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_fu_945_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_2769 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_2774 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_395 : BOOLEAN;
    signal grp_fu_999_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zl_reg_2789 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_406 : BOOLEAN;
    signal p_01_rec_i_fu_1005_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_01_rec_i_reg_2794 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_415 : BOOLEAN;
    signal exitcond3_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_440 : BOOLEAN;
    signal grp_fu_1075_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_i_reg_2842 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_451 : BOOLEAN;
    signal zl_1_fu_1081_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_460 : BOOLEAN;
    signal grp_fu_1041_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pl_1_reg_2852 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_469 : BOOLEAN;
    signal grp_fu_1061_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_i1_reg_2857 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_i_fu_1086_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_i_reg_2862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_480 : BOOLEAN;
    signal tmp_23_fu_1149_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_2867 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_1_fu_1163_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_1_reg_2872 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_cast_fu_1171_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_i2_cast_reg_2877 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_67_i_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_i_reg_2883 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_495 : BOOLEAN;
    signal mil_fu_1181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mil_reg_2887 : STD_LOGIC_VECTOR (4 downto 0);
    signal decis_levl_load_reg_2897 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_510 : BOOLEAN;
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_519 : BOOLEAN;
    signal tmp_71_i_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_543 : BOOLEAN;
    signal qq4_code4_table_load_reg_2925 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_553 : BOOLEAN;
    signal wd1_reg_2930 : STD_LOGIC_VECTOR (4 downto 0);
    signal wd2_cast_reg_2935 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_1376_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_2940 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_566 : BOOLEAN;
    signal tmp_i5_fu_1452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_583 : BOOLEAN;
    signal grp_encode_upzero_fu_649_ap_done : STD_LOGIC;
    signal tmp_39_reg_2976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_598 : BOOLEAN;
    signal tmp_44_reg_2982 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_fu_1624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_reg_2987 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_609 : BOOLEAN;
    signal tmp_93_i_fu_1630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_i_reg_2992 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_fu_1671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_reg_2997 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zl_2_reg_3003 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_rec_i1_fu_1807_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_01_rec_i1_reg_3008 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_624 : BOOLEAN;
    signal exitcond1_fu_1819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_649 : BOOLEAN;
    signal grp_fu_1877_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_i3_reg_3056 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_660 : BOOLEAN;
    signal zl_3_fu_1883_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_669 : BOOLEAN;
    signal grp_fu_1843_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pl_4_reg_3066 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_678 : BOOLEAN;
    signal grp_fu_1863_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_i2_reg_3071 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_i2_fu_1888_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_i2_reg_3076 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_689 : BOOLEAN;
    signal tmp_49_fu_1952_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_3081 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_3093 : STD_LOGIC_VECTOR (29 downto 0);
    signal n_assign_3_fu_2012_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_3_reg_3098 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_cast1_fu_2028_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_34_cast1_reg_3103 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_706 : BOOLEAN;
    signal tmp_30_fu_2060_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_3111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_717 : BOOLEAN;
    signal wd2_4_cast_reg_3121 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_reg_3131 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_730 : BOOLEAN;
    signal tmp_i10_fu_2282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_739 : BOOLEAN;
    signal tmp_54_reg_3153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_753 : BOOLEAN;
    signal tmp_57_reg_3159 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_1_fu_2440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_1_reg_3164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_764 : BOOLEAN;
    signal tmp_93_i1_fu_2446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_i1_reg_3169 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_4_fu_2487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_4_reg_3174 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_ap_start : STD_LOGIC;
    signal grp_encode_upzero_fu_649_ap_idle : STD_LOGIC;
    signal grp_encode_upzero_fu_649_ap_ready : STD_LOGIC;
    signal grp_encode_upzero_fu_649_dlt : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_dlti_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_upzero_fu_649_dlti_ce0 : STD_LOGIC;
    signal grp_encode_upzero_fu_649_dlti_we0 : STD_LOGIC;
    signal grp_encode_upzero_fu_649_dlti_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_dlti_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_dlti_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_upzero_fu_649_dlti_ce1 : STD_LOGIC;
    signal grp_encode_upzero_fu_649_dlti_we1 : STD_LOGIC;
    signal grp_encode_upzero_fu_649_dlti_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_dlti_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_bli_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_upzero_fu_649_bli_ce0 : STD_LOGIC;
    signal grp_encode_upzero_fu_649_bli_we0 : STD_LOGIC;
    signal grp_encode_upzero_fu_649_bli_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_upzero_fu_649_bli_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_ptr_0_rec_reg_521 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_532 : STD_LOGIC_VECTOR (3 downto 0);
    signal xa1_reg_543 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb1_reg_553 : STD_LOGIC_VECTOR (49 downto 0);
    signal tqmf_ptr_0_pn_rec_reg_563 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_809 : BOOLEAN;
    signal i_1_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal zl1_i_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_821 : BOOLEAN;
    signal dlt_pn_rec_i_reg_595 : STD_LOGIC_VECTOR (2 downto 0);
    signal mil_i_reg_606 : STD_LOGIC_VECTOR (4 downto 0);
    signal zl1_i1_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_839 : BOOLEAN;
    signal dlt_pn_rec_i1_reg_628 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_2039_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ih_assign_phi_fu_642_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ih_assign_reg_639 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_2034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_2020_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encode_upzero_fu_649_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_859 : BOOLEAN;
    signal tqmf_ptr_0_rec_cast_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tqmf_ptr_0_sum1_cast_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tqmf_ptr_0_sum_cast_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_rec_i_cast_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_i_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_i_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_1392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_rec_i1_cast_fu_1813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_2206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_4_cast_fu_1765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_assign_cast_fu_1701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i1_fu_1106_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal el_assign_fu_1134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_i_cast_fu_1430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal il_assign_cast_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_908 : BOOLEAN;
    signal nbl_assign_2_cast_fu_1338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_2599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_9_cast_fu_2581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_assign_1_cast_fu_2517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i2_fu_1908_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_2_fu_1940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_cast_cast_fu_1960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_cast_cast_fu_2047_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_i1_cast_fu_2234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_953 : BOOLEAN;
    signal nbl_assign_3_cast_fu_2176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_2260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_704_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_shl1_fu_716_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl_cast_fu_712_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_shl1_cast_fu_724_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal xa_fu_728_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal xb_fu_742_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xb_fu_742_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tqmf_ptr_0_sum1_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_795_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_807_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_813_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_10_cast_fu_822_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_6_fu_835_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_835_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_6_cast_fu_841_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal xa_1_fu_845_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_shl2_fu_859_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_shl3_fu_871_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl2_cast_fu_867_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_shl3_cast_fu_879_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_9_fu_883_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_9_cast_fu_889_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb_1_fu_893_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_15_fu_907_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_sum_fu_911_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tqmf_ptr_0_sum_fu_928_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_951_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_5_fu_971_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_999_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1027_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1041_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1041_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1061_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1061_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1075_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_2_fu_1102_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_1157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_i_fu_1195_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_70_i_fu_1195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_i_fu_1195_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_10_fu_1200_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ril_2_fu_1221_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_1238_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_i_fu_1262_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_i_cast_fu_1270_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_i2_cast_26_fu_1258_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_i3_fu_1274_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_75_i_fu_1280_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal wl_code_table_load_cast_fu_1290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal nbl_assign_1_fu_1294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_1304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1300_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_i_fu_1312_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_78_i_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1320_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal nbl_assign_2_fu_1330_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_1371_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_1371_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_80_i_fu_1407_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_80_i_cast_cast_fu_1412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_fu_1416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_i_fu_1422_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1460_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1470_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1496_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1470_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wd2_fu_1522_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal wd2_1_cast_fu_1530_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_17_fu_1540_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal wd2_1_fu_1534_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_18_fu_1550_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_42_fu_1554_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_43_fu_1564_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl_i1_fu_1586_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_i1_cast_fu_1594_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_89_i_cast_fu_1582_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_90_i_fu_1598_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_88_i_cast_cast_fu_1575_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_85_i_cast_cast_fu_1571_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_1614_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_91_i_cast_cast_fu_1604_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_cast_fu_1620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i2_fu_1636_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_shl_i2_cast_fu_1644_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i4_cast1_fu_1518_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i6_fu_1648_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal apl_i_v_cast_cast_fu_1664_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_i_fu_1654_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i1_fu_1677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_i_fu_1687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1683_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl2_assign_fu_1693_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_8_fu_1711_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_10_cast_fu_1721_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_i_fu_1725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wd3_0_apl1_i_fu_1730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_10_cast1_fu_1717_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_2_fu_1741_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_3_cast_fu_1747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_i_fu_1751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1737_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_3_fu_1757_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_1829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1843_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1849_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1863_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1877_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_5_fu_1904_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_1982_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1982_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_50_fu_1998_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_2006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal decis_fu_2031_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_2060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_2060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_2060_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_2060_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_2060_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_2077_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2077_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i3_fu_2090_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_i3_cast_fu_2098_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_i9_cast_fu_2086_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_i9_fu_2102_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_34_fu_2118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2118_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2118_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2118_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal wd_fu_2108_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2118_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal nbh_assign_1_fu_2132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_2142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_2138_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_i2_fu_2150_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_105_i_fu_2162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_2158_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal nbl_assign_3_fu_2168_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_1_fu_2186_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_i1_fu_2211_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_80_i1_cast_cast_fu_2216_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_2_fu_2220_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_i1_fu_2226_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2077_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_2290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2300_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2290_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wd2_2_fu_2338_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal wd2_5_cast_fu_2346_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_37_fu_2356_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal wd2_3_fu_2350_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_41_fu_2366_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_55_fu_2370_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_56_fu_2380_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl_i4_fu_2402_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_i4_cast_fu_2410_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_89_i1_cast7_fu_2398_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_90_i1_fu_2414_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_88_i1_cast_cast_fu_2391_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_85_i1_cast_cast_fu_2387_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_2430_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_91_i1_cast_cast_fu_2420_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_cast_fu_2436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i5_fu_2452_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_shl_i5_cast_fu_2460_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i11_cast8_fu_2334_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i11_fu_2464_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal apl_i1_v_cast_cast_fu_2480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_i1_fu_2470_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i3_fu_2493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_i1_fu_2503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_2499_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl2_assign_1_fu_2509_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_9_fu_2527_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_11_cast_fu_2537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_i1_fu_2541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wd3_0_apl1_i1_fu_2546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_11_cast6_fu_2533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_6_fu_2557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_8_cast_fu_2563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_i1_fu_2567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_2553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_7_fu_2573_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_2631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_999_ce : STD_LOGIC;
    signal grp_fu_1041_ce : STD_LOGIC;
    signal grp_fu_1061_ce : STD_LOGIC;
    signal grp_fu_1075_ce : STD_LOGIC;
    signal grp_fu_1460_ce : STD_LOGIC;
    signal grp_fu_1470_ce : STD_LOGIC;
    signal grp_fu_1496_ce : STD_LOGIC;
    signal grp_fu_1843_ce : STD_LOGIC;
    signal grp_fu_1863_ce : STD_LOGIC;
    signal grp_fu_1877_ce : STD_LOGIC;
    signal grp_fu_2077_ce : STD_LOGIC;
    signal grp_fu_2290_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_1962 : BOOLEAN;
    signal grp_fu_2300_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_70_i_fu_1195_p00 : STD_LOGIC_VECTOR (46 downto 0);

    component encode_upzero IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dlt : IN STD_LOGIC_VECTOR (31 downto 0);
        dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce0 : OUT STD_LOGIC;
        dlti_we0 : OUT STD_LOGIC;
        dlti_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dlti_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce1 : OUT STD_LOGIC;
        dlti_we1 : OUT STD_LOGIC;
        dlti_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dlti_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bli_ce0 : OUT STD_LOGIC;
        bli_we0 : OUT STD_LOGIC;
        bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_mul_32s_32s_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component encode_mux_4to1_sel2_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_mul_32s_32s_47_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component encode_tqmf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_h IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component encode_delay_bpl IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_delay_dltx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_decis_levl IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component encode_quant26bt_pos IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component encode_quant26bt_neg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component encode_qq4_code4_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component encode_wl_code_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component encode_ilb_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    tqmf_U : component encode_tqmf
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tqmf_address0,
        ce0 => tqmf_ce0,
        we0 => tqmf_we0,
        d0 => tqmf_d0,
        q0 => tqmf_q0,
        address1 => tqmf_address1,
        ce1 => tqmf_ce1,
        we1 => tqmf_we1,
        d1 => tqmf_d1,
        q1 => tqmf_q1);

    h_U : component encode_h
    generic map (
        DataWidth => 15,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        q0 => h_q0,
        address1 => h_address1,
        ce1 => h_ce1,
        q1 => h_q1);

    delay_bpl_U : component encode_delay_bpl
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_bpl_address0,
        ce0 => delay_bpl_ce0,
        we0 => delay_bpl_we0,
        d0 => delay_bpl_d0,
        q0 => delay_bpl_q0);

    delay_dltx_U : component encode_delay_dltx
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_dltx_address0,
        ce0 => delay_dltx_ce0,
        we0 => delay_dltx_we0,
        d0 => delay_dltx_d0,
        q0 => delay_dltx_q0,
        address1 => delay_dltx_address1,
        ce1 => delay_dltx_ce1,
        we1 => delay_dltx_we1,
        d1 => delay_dltx_d1,
        q1 => delay_dltx_q1);

    decis_levl_U : component encode_decis_levl
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => decis_levl_address0,
        ce0 => decis_levl_ce0,
        q0 => decis_levl_q0);

    quant26bt_pos_U : component encode_quant26bt_pos
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_pos_address0,
        ce0 => quant26bt_pos_ce0,
        q0 => quant26bt_pos_q0);

    quant26bt_neg_U : component encode_quant26bt_neg
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_neg_address0,
        ce0 => quant26bt_neg_ce0,
        q0 => quant26bt_neg_q0);

    qq4_code4_table_U : component encode_qq4_code4_table
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => qq4_code4_table_address0,
        ce0 => qq4_code4_table_ce0,
        q0 => qq4_code4_table_q0);

    wl_code_table_U : component encode_wl_code_table
    generic map (
        DataWidth => 13,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wl_code_table_address0,
        ce0 => wl_code_table_ce0,
        q0 => wl_code_table_q0);

    ilb_table_U : component encode_ilb_table
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ilb_table_address0,
        ce0 => ilb_table_ce0,
        q0 => ilb_table_q0);

    delay_bph_U : component encode_delay_bpl
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_bph_address0,
        ce0 => delay_bph_ce0,
        we0 => delay_bph_we0,
        d0 => delay_bph_d0,
        q0 => delay_bph_q0);

    delay_dhx_U : component encode_delay_dltx
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_dhx_address0,
        ce0 => delay_dhx_ce0,
        we0 => delay_dhx_we0,
        d0 => delay_dhx_d0,
        q0 => delay_dhx_q0,
        address1 => delay_dhx_address1,
        ce1 => delay_dhx_ce1,
        we1 => delay_dhx_we1,
        d1 => delay_dhx_d1,
        q1 => delay_dhx_q1);

    grp_encode_upzero_fu_649 : component encode_upzero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_encode_upzero_fu_649_ap_start,
        ap_done => grp_encode_upzero_fu_649_ap_done,
        ap_idle => grp_encode_upzero_fu_649_ap_idle,
        ap_ready => grp_encode_upzero_fu_649_ap_ready,
        dlt => grp_encode_upzero_fu_649_dlt,
        dlti_address0 => grp_encode_upzero_fu_649_dlti_address0,
        dlti_ce0 => grp_encode_upzero_fu_649_dlti_ce0,
        dlti_we0 => grp_encode_upzero_fu_649_dlti_we0,
        dlti_d0 => grp_encode_upzero_fu_649_dlti_d0,
        dlti_q0 => grp_encode_upzero_fu_649_dlti_q0,
        dlti_address1 => grp_encode_upzero_fu_649_dlti_address1,
        dlti_ce1 => grp_encode_upzero_fu_649_dlti_ce1,
        dlti_we1 => grp_encode_upzero_fu_649_dlti_we1,
        dlti_d1 => grp_encode_upzero_fu_649_dlti_d1,
        dlti_q1 => grp_encode_upzero_fu_649_dlti_q1,
        bli_address0 => grp_encode_upzero_fu_649_bli_address0,
        bli_ce0 => grp_encode_upzero_fu_649_bli_ce0,
        bli_we0 => grp_encode_upzero_fu_649_bli_we0,
        bli_d0 => grp_encode_upzero_fu_649_bli_d0,
        bli_q0 => grp_encode_upzero_fu_649_bli_q0);

    encode_mul_32s_32s_64_3_U5 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_999_p0,
        din1 => grp_fu_999_p1,
        ce => grp_fu_999_ce,
        dout => grp_fu_999_p2);

    encode_mul_32s_32s_64_3_U6 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1041_p0,
        din1 => grp_fu_1041_p1,
        ce => grp_fu_1041_ce,
        dout => grp_fu_1041_p2);

    encode_mul_32s_32s_64_3_U7 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1061_p0,
        din1 => grp_fu_1061_p1,
        ce => grp_fu_1061_ce,
        dout => grp_fu_1061_p2);

    encode_mul_32s_32s_64_3_U8 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1075_p0,
        din1 => grp_fu_1075_p1,
        ce => grp_fu_1075_ce,
        dout => grp_fu_1075_p2);

    encode_mul_32s_32s_64_3_U9 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1460_p0,
        din1 => grp_fu_1460_p1,
        ce => grp_fu_1460_ce,
        dout => grp_fu_1460_p2);

    encode_mul_32s_32s_64_3_U10 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1470_p0,
        din1 => grp_fu_1470_p1,
        ce => grp_fu_1470_ce,
        dout => grp_fu_1470_p2);

    encode_mul_32s_32s_64_3_U11 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1496_p0,
        din1 => grp_fu_1496_p1,
        ce => grp_fu_1496_ce,
        dout => grp_fu_1496_p2);

    encode_mul_32s_32s_64_3_U12 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1843_p0,
        din1 => grp_fu_1843_p1,
        ce => grp_fu_1843_ce,
        dout => grp_fu_1843_p2);

    encode_mul_32s_32s_64_3_U13 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1863_p0,
        din1 => grp_fu_1863_p1,
        ce => grp_fu_1863_ce,
        dout => grp_fu_1863_p2);

    encode_mul_32s_32s_64_3_U14 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1877_p0,
        din1 => grp_fu_1877_p1,
        ce => grp_fu_1877_ce,
        dout => grp_fu_1877_p2);

    encode_mux_4to1_sel2_32_1_U15 : component encode_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_30_fu_2060_p1,
        din2 => tmp_30_fu_2060_p2,
        din3 => tmp_30_fu_2060_p3,
        din4 => tmp_30_fu_2060_p4,
        din5 => tmp_30_fu_2060_p5,
        dout => tmp_30_fu_2060_p6);

    encode_mul_32s_32s_47_3_U16 : component encode_mul_32s_32s_47_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2077_p0,
        din1 => grp_fu_2077_p1,
        ce => grp_fu_2077_ce,
        dout => grp_fu_2077_p2);

    encode_mux_4to1_sel2_32_1_U17 : component encode_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_34_fu_2118_p1,
        din2 => tmp_34_fu_2118_p2,
        din3 => tmp_34_fu_2118_p3,
        din4 => tmp_34_fu_2118_p4,
        din5 => tmp_34_fu_2118_p5,
        dout => tmp_34_fu_2118_p6);

    encode_mul_32s_32s_64_3_U18 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2290_p0,
        din1 => grp_fu_2290_p1,
        ce => grp_fu_2290_ce,
        dout => grp_fu_2290_p2);

    encode_mul_32s_32s_64_3_U19 : component encode_mul_32s_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2300_p0,
        din1 => grp_fu_2300_p1,
        ce => grp_fu_2300_ce,
        dout => grp_fu_2300_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_encode_upzero_fu_649_ap_start_ap_start_reg assign process. --
    grp_encode_upzero_fu_649_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_encode_upzero_fu_649_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
                    grp_encode_upzero_fu_649_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_encode_upzero_fu_649_ap_ready)) then 
                    grp_encode_upzero_fu_649_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- dlt_pn_rec_i1_reg_628 assign process. --
    dlt_pn_rec_i1_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                dlt_pn_rec_i1_reg_628 <= p_01_rec_i1_reg_3008;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                dlt_pn_rec_i1_reg_628 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- dlt_pn_rec_i_reg_595 assign process. --
    dlt_pn_rec_i_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                dlt_pn_rec_i_reg_595 <= p_01_rec_i_reg_2794;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                dlt_pn_rec_i_reg_595 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i_1_reg_574 assign process. --
    i_1_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                i_1_reg_574 <= i_3_reg_2769;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                i_1_reg_574 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_532 assign process. --
    i_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_reg_532 <= i_2_reg_2676;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_532 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- ih assign process. --
    ih_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) and not((ap_const_lv1_0 = tmp_28_fu_2034_p2)))) then 
                                ih(1 downto 0) <= tmp_38_cast_cast_fu_2047_p3(1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
                                ih(1 downto 0) <= tmp_33_cast_cast_fu_1960_p3(1 downto 0);
            end if; 
        end if;
    end process;

    -- ih_assign_reg_639 assign process. --
    ih_assign_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then
                if ((ap_const_lv1_0 = tmp_28_fu_2034_p2)) then 
                    ih_assign_reg_639 <= tmp_24_fu_2020_p3;
                elsif (not((ap_const_lv1_0 = tmp_28_fu_2034_p2))) then 
                    ih_assign_reg_639 <= tmp_29_fu_2039_p3;
                end if;
            end if; 
        end if;
    end process;

    -- mil_i_reg_606 assign process. --
    mil_i_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and not((ap_const_lv1_0 = tmp_71_i_fu_1210_p2)) and not((ap_const_lv1_0 = tmp_67_i_reg_2883)))) then 
                mil_i_reg_606 <= mil_reg_2887;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                mil_i_reg_606 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- tqmf_ptr_0_pn_rec_reg_563 assign process. --
    tqmf_ptr_0_pn_rec_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                tqmf_ptr_0_pn_rec_reg_563 <= tqmf_ptr1_0_rec_reg_2756;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                tqmf_ptr_0_pn_rec_reg_563 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- tqmf_ptr_0_rec_reg_521 assign process. --
    tqmf_ptr_0_rec_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                tqmf_ptr_0_rec_reg_521 <= phitmp_reg_2691;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                tqmf_ptr_0_rec_reg_521 <= ap_const_lv5_2;
            end if; 
        end if;
    end process;

    -- xa1_reg_543 assign process. --
    xa1_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                xa1_reg_543 <= xa_2_fu_816_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                xa1_reg_543 <= xa_cast_fu_734_p1;
            end if; 
        end if;
    end process;

    -- xb1_reg_553 assign process. --
    xb1_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                xb1_reg_553 <= xb_2_fu_825_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                xb1_reg_553 <= xb_cast_fu_748_p1;
            end if; 
        end if;
    end process;

    -- zl1_i1_reg_618 assign process. --
    zl1_i1_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                zl1_i1_reg_618 <= zl_3_fu_1883_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                zl1_i1_reg_618 <= zl_2_reg_3003;
            end if; 
        end if;
    end process;

    -- zl1_i_reg_585 assign process. --
    zl1_i_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                zl1_i_reg_585 <= zl_1_fu_1081_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                zl1_i_reg_585 <= zl_reg_2789;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then
                ah1 <= apl1_9_cast_fu_2581_p1;
                ah2 <= apl2_assign_1_cast_fu_2517_p1;
                rh1 <= tmp_38_fu_2599_p2;
                rh2 <= rh1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then
                al1 <= apl1_4_cast_fu_1765_p1;
                al2 <= apl2_assign_cast_fu_1701_p1;
                rlt1 <= tmp_20_fu_1783_p2;
                rlt2 <= rlt1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then
                apl1_4_reg_3174 <= apl1_4_fu_2487_p2;
                apl2_1_reg_3164 <= apl2_1_fu_2440_p2;
                tmp_93_i1_reg_3169 <= tmp_93_i1_fu_2446_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then
                apl1_reg_2997 <= apl1_fu_1671_p2;
                apl2_reg_2987 <= apl2_fu_1624_p2;
                tmp_93_i_reg_2992 <= tmp_93_i_fu_1630_p2;
                zl_2_reg_3003 <= grp_fu_1496_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                decis_levl_load_reg_2897 <= decis_levl_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                    deth(14 downto 3) <= tmp_81_i1_cast_fu_2234_p1(14 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                    detl(14 downto 3) <= tmp_81_i_cast_fu_1430_p1(14 downto 3);
                plt1 <= plt;
                plt2 <= plt1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                dh <= grp_fu_2077_p2(46 downto 15);
                tmp_33_reg_3131 <= grp_fu_2077_p2(46 downto 15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                dlt <= tmp_13_fu_1371_p2(46 downto 15);
                plt <= tmp_16_fu_1396_p2;
                tmp_14_reg_2940 <= tmp_13_fu_1371_p2(46 downto 15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                h_load_reg_2696 <= h_q0;
                h_ptr_load_reg_2706 <= h_q1;
                tqmf_ptr_load_reg_2701 <= tqmf_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_2_reg_2676 <= i_2_fu_764_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                i_3_reg_2769 <= i_3_fu_945_p2;
                tqmf_addr_2_reg_2751 <= p_sum_cast_fu_917_p1(5 - 1 downto 0);
                tqmf_ptr1_0_rec_reg_2756 <= tqmf_ptr1_0_rec_fu_922_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                    il(5 downto 0) <= il_assign_cast_fu_1228_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                mil_reg_2887 <= mil_fu_1181_p2;
                tmp_67_i_reg_2883 <= tmp_67_i_fu_1175_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                n_assign_1_reg_2872 <= n_assign_1_fu_1163_p3;
                sl <= tmp_7_fu_1122_p2;
                tmp_23_reg_2867 <= el_assign_fu_1134_p2(31 downto 31);
                tmp_63_i_reg_2862 <= zl1_i_reg_585(45 downto 14);
                    tmp_i2_cast_reg_2877(14 downto 3) <= tmp_i2_cast_fu_1171_p1(14 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then
                n_assign_3_reg_3098 <= n_assign_3_fu_2012_p3;
                sh <= tmp_21_fu_1924_p2;
                tmp_27_reg_3093 <= tmp_25_fu_1982_p2(41 downto 12);
                tmp_49_reg_3081 <= n_assign_2_fu_1940_p2(31 downto 31);
                tmp_63_i2_reg_3076 <= zl1_i1_reg_618(45 downto 14);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then
                    nbh(14 downto 0) <= nbl_assign_3_cast_fu_2176_p1(14 downto 0);
                wd2_4_cast_reg_3121 <= nbl_assign_3_fu_2168_p3(14 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                    nbl(14 downto 0) <= nbl_assign_2_cast_fu_1338_p1(14 downto 0);
                qq4_code4_table_load_reg_2925 <= qq4_code4_table_q0;
                wd1_reg_2930 <= nbl_assign_2_fu_1330_p3(10 downto 6);
                wd2_cast_reg_2935 <= nbl_assign_2_fu_1330_p3(14 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                p_01_rec_i1_reg_3008 <= p_01_rec_i1_fu_1807_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                p_01_rec_i_reg_2794 <= p_01_rec_i_fu_1005_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then
                ph <= tmp_35_fu_2260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50))) then
                ph1 <= ph;
                ph2 <= ph1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_758_p2 = ap_const_lv1_0))) then
                phitmp_reg_2691 <= phitmp_fu_782_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                pl_1_reg_2852 <= grp_fu_1041_p2;
                tmp_64_i1_reg_2857 <= grp_fu_1061_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                pl_4_reg_3066 <= grp_fu_1843_p2;
                tmp_64_i2_reg_3071 <= grp_fu_1863_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then
                reg_684 <= tqmf_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then
                reg_688 <= delay_bpl_q0;
                reg_692 <= delay_dltx_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_696 <= delay_bph_q0;
                reg_700 <= delay_dhx_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_2_reg_2711 <= tmp_2_fu_795_p2;
                tmp_s_reg_2716 <= tmp_s_fu_807_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then
                tmp_30_reg_3111 <= tmp_30_fu_2060_p6;
                    tmp_34_cast1_reg_3103(14 downto 3) <= tmp_34_cast1_fu_2028_p1(14 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                tmp_39_reg_2976 <= grp_fu_1460_p2(63 downto 63);
                tmp_44_reg_2982 <= grp_fu_1470_p2(63 downto 63);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_3_reg_2746 <= tmp_3_fu_903_p1;
                tmp_reg_2736 <= tmp_fu_855_p1;
                    xa_1_cast1_reg_2731(49 downto 0) <= xa_1_cast1_fu_851_p1(49 downto 0);
                    xb_1_cast1_reg_2741(49 downto 0) <= xb_1_cast1_fu_899_p1(49 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_939_p2)))) then
                tmp_4_reg_2774 <= tmp_1_fu_951_p2(46 downto 15);
                xh <= tmp_5_fu_971_p2(46 downto 15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52)) then
                tmp_54_reg_3153 <= grp_fu_2290_p2(63 downto 63);
                tmp_57_reg_3159 <= grp_fu_2300_p2(63 downto 63);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then
                tmp_66_i3_reg_3056 <= grp_fu_1877_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                tmp_66_i_reg_2842 <= grp_fu_1075_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                zl_reg_2789 <= grp_fu_999_p2;
            end if;
        end if;
    end process;
    detl(2 downto 0) <= "000";
    detl(31 downto 15) <= "00000000000000000";
    il(31 downto 6) <= "00000000000000000000000000";
    nbl(31 downto 15) <= "00000000000000000";
    ih(31 downto 2) <= "000000000000000000000000000000";
    deth(2 downto 0) <= "000";
    deth(31 downto 15) <= "00000000000000000";
    nbh(31 downto 15) <= "00000000000000000";
    xa_1_cast1_reg_2731(50) <= '0';
    xb_1_cast1_reg_2741(50) <= '0';
    tmp_i2_cast_reg_2877(2 downto 0) <= "000";
    tmp_i2_cast_reg_2877(46 downto 15) <= "00000000000000000000000000000000";
    tmp_34_cast1_reg_3103(2 downto 0) <= "000";
    tmp_34_cast1_reg_3103(46 downto 15) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_758_p2, exitcond_fu_939_p2, exitcond3_fu_1017_p2, tmp_67_i_fu_1175_p2, tmp_67_i_reg_2883, tmp_71_i_fu_1210_p2, grp_encode_upzero_fu_649_ap_done, exitcond1_fu_1819_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond2_fu_758_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_939_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_1017_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = tmp_67_i_fu_1175_p2)) then
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                if (((ap_const_lv1_0 = tmp_67_i_reg_2883) or (ap_const_lv1_0 = tmp_71_i_fu_1210_p2))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                if (not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_1819_p2))) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                end if;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                if (not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done))) then
                    ap_NS_fsm <= ap_ST_st52_fsm_51;
                else
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                end if;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (il or tmp_60_fu_2631_p2);

    -- ap_sig_bdd_1962 assign process. --
    ap_sig_bdd_1962_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1962 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_237 assign process. --
    ap_sig_bdd_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_237 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_244 assign process. --
    ap_sig_bdd_244_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_244 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_252 assign process. --
    ap_sig_bdd_252_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_252 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_261 assign process. --
    ap_sig_bdd_261_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_261 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_268 assign process. --
    ap_sig_bdd_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_268 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_278 assign process. --
    ap_sig_bdd_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_278 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_285 assign process. --
    ap_sig_bdd_285_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_285 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_296 assign process. --
    ap_sig_bdd_296_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_296 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_311 assign process. --
    ap_sig_bdd_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_311 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_337 assign process. --
    ap_sig_bdd_337_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_337 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_348 assign process. --
    ap_sig_bdd_348_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_348 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_359 assign process. --
    ap_sig_bdd_359_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_359 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_374 assign process. --
    ap_sig_bdd_374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_374 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_395 assign process. --
    ap_sig_bdd_395_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_395 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_406 assign process. --
    ap_sig_bdd_406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_406 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_415 assign process. --
    ap_sig_bdd_415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_415 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_440 assign process. --
    ap_sig_bdd_440_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_440 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_451 assign process. --
    ap_sig_bdd_451_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_451 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_460 assign process. --
    ap_sig_bdd_460_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_460 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_469 assign process. --
    ap_sig_bdd_469_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_469 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_480 assign process. --
    ap_sig_bdd_480_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_480 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_495 assign process. --
    ap_sig_bdd_495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_495 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_510 assign process. --
    ap_sig_bdd_510_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_510 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_519 assign process. --
    ap_sig_bdd_519_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_519 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_543 assign process. --
    ap_sig_bdd_543_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_543 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_553 assign process. --
    ap_sig_bdd_553_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_553 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_566 assign process. --
    ap_sig_bdd_566_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_566 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_583 assign process. --
    ap_sig_bdd_583_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_583 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_598 assign process. --
    ap_sig_bdd_598_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_598 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_609 assign process. --
    ap_sig_bdd_609_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_609 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_624 assign process. --
    ap_sig_bdd_624_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_624 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_649 assign process. --
    ap_sig_bdd_649_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_649 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_660 assign process. --
    ap_sig_bdd_660_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_660 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_669 assign process. --
    ap_sig_bdd_669_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_669 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_678 assign process. --
    ap_sig_bdd_678_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_678 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_689 assign process. --
    ap_sig_bdd_689_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_689 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_706 assign process. --
    ap_sig_bdd_706_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_706 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_717 assign process. --
    ap_sig_bdd_717_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_717 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_730 assign process. --
    ap_sig_bdd_730_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_730 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_739 assign process. --
    ap_sig_bdd_739_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_739 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_753 assign process. --
    ap_sig_bdd_753_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_753 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_764 assign process. --
    ap_sig_bdd_764_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_764 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_809 assign process. --
    ap_sig_bdd_809_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_809 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_821 assign process. --
    ap_sig_bdd_821_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_821 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_839 assign process. --
    ap_sig_bdd_839_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_839 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_859 assign process. --
    ap_sig_bdd_859_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_859 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_908 assign process. --
    ap_sig_bdd_908_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_908 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_953 assign process. --
    ap_sig_bdd_953_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_953 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_374)
    begin
        if (ap_sig_bdd_374) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_809)
    begin
        if (ap_sig_bdd_809) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_261)
    begin
        if (ap_sig_bdd_261) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_395)
    begin
        if (ap_sig_bdd_395) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_406)
    begin
        if (ap_sig_bdd_406) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_821)
    begin
        if (ap_sig_bdd_821) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_415)
    begin
        if (ap_sig_bdd_415) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_268)
    begin
        if (ap_sig_bdd_268) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_440)
    begin
        if (ap_sig_bdd_440) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_451)
    begin
        if (ap_sig_bdd_451) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_460)
    begin
        if (ap_sig_bdd_460) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_469)
    begin
        if (ap_sig_bdd_469) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_480)
    begin
        if (ap_sig_bdd_480) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_495)
    begin
        if (ap_sig_bdd_495) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_510)
    begin
        if (ap_sig_bdd_510) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_519)
    begin
        if (ap_sig_bdd_519) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_543)
    begin
        if (ap_sig_bdd_543) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_237)
    begin
        if (ap_sig_bdd_237) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_553)
    begin
        if (ap_sig_bdd_553) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_566)
    begin
        if (ap_sig_bdd_566) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_278)
    begin
        if (ap_sig_bdd_278) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_583)
    begin
        if (ap_sig_bdd_583) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_598)
    begin
        if (ap_sig_bdd_598) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_609)
    begin
        if (ap_sig_bdd_609) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_839)
    begin
        if (ap_sig_bdd_839) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_624)
    begin
        if (ap_sig_bdd_624) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_285)
    begin
        if (ap_sig_bdd_285) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_649)
    begin
        if (ap_sig_bdd_649) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_296)
    begin
        if (ap_sig_bdd_296) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_660)
    begin
        if (ap_sig_bdd_660) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_669)
    begin
        if (ap_sig_bdd_669) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_678)
    begin
        if (ap_sig_bdd_678) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_689)
    begin
        if (ap_sig_bdd_689) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_706)
    begin
        if (ap_sig_bdd_706) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_717)
    begin
        if (ap_sig_bdd_717) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_953)
    begin
        if (ap_sig_bdd_953) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_730)
    begin
        if (ap_sig_bdd_730) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_311)
    begin
        if (ap_sig_bdd_311) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_859)
    begin
        if (ap_sig_bdd_859) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_739)
    begin
        if (ap_sig_bdd_739) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_1962)
    begin
        if (ap_sig_bdd_1962) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st53_fsm_52 assign process. --
    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_bdd_753)
    begin
        if (ap_sig_bdd_753) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_53 assign process. --
    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_bdd_764)
    begin
        if (ap_sig_bdd_764) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st55_fsm_54 assign process. --
    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_bdd_908)
    begin
        if (ap_sig_bdd_908) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_244)
    begin
        if (ap_sig_bdd_244) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_337)
    begin
        if (ap_sig_bdd_337) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_348)
    begin
        if (ap_sig_bdd_348) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_252)
    begin
        if (ap_sig_bdd_252) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_359)
    begin
        if (ap_sig_bdd_359) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    apl1_10_cast1_fu_1717_p1 <= std_logic_vector(resize(unsigned(apl1_8_fu_1711_p2),16));
    apl1_10_cast_fu_1721_p1 <= std_logic_vector(resize(unsigned(apl1_8_fu_1711_p2),32));
    apl1_11_cast6_fu_2533_p1 <= std_logic_vector(resize(unsigned(apl1_9_fu_2527_p2),16));
    apl1_11_cast_fu_2537_p1 <= std_logic_vector(resize(unsigned(apl1_9_fu_2527_p2),32));
    apl1_2_fu_1741_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(apl1_10_cast1_fu_1717_p1));
        apl1_3_cast_fu_1747_p1 <= std_logic_vector(resize(signed(apl1_2_fu_1741_p2),32));

    apl1_3_fu_1757_p3 <= 
        apl1_2_fu_1741_p2 when (tmp_102_i_fu_1751_p2(0) = '1') else 
        tmp_46_fu_1737_p1;
        apl1_4_cast_fu_1765_p1 <= std_logic_vector(resize(signed(apl1_3_fu_1757_p3),32));

    apl1_4_fu_2487_p2 <= std_logic_vector(unsigned(apl_i1_v_cast_cast_fu_2480_p3) + unsigned(tmp_99_i1_fu_2470_p4));
    apl1_6_fu_2557_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(apl1_11_cast6_fu_2533_p1));
    apl1_7_fu_2573_p3 <= 
        apl1_6_fu_2557_p2 when (tmp_102_i1_fu_2567_p2(0) = '1') else 
        tmp_59_fu_2553_p1;
        apl1_8_cast_fu_2563_p1 <= std_logic_vector(resize(signed(apl1_6_fu_2557_p2),32));

    apl1_8_fu_1711_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_assign_fu_1693_p3));
        apl1_9_cast_fu_2581_p1 <= std_logic_vector(resize(signed(apl1_7_fu_2573_p3),32));

    apl1_9_fu_2527_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_assign_1_fu_2509_p3));
    apl1_fu_1671_p2 <= std_logic_vector(unsigned(apl_i_v_cast_cast_fu_1664_p3) + unsigned(tmp_99_i_fu_1654_p4));
    apl2_1_fu_2440_p2 <= std_logic_vector(unsigned(tmp_91_i1_cast_cast_fu_2420_p4) + unsigned(tmp5_cast_fu_2436_p1));
        apl2_assign_1_cast_fu_2517_p1 <= std_logic_vector(resize(signed(apl2_assign_1_fu_2509_p3),32));

    apl2_assign_1_fu_2509_p3 <= 
        ap_const_lv15_5000 when (tmp_94_i1_fu_2503_p2(0) = '1') else 
        tmp_58_fu_2499_p1;
        apl2_assign_cast_fu_1701_p1 <= std_logic_vector(resize(signed(apl2_assign_fu_1693_p3),32));

    apl2_assign_fu_1693_p3 <= 
        ap_const_lv15_5000 when (tmp_94_i_fu_1687_p2(0) = '1') else 
        tmp_45_fu_1683_p1;
    apl2_fu_1624_p2 <= std_logic_vector(unsigned(tmp_91_i_cast_cast_fu_1604_p4) + unsigned(tmp4_cast_fu_1620_p1));
    apl_i1_v_cast_cast_fu_2480_p3 <= 
        ap_const_lv32_FFFFFF40 when (tmp_54_reg_3153(0) = '1') else 
        ap_const_lv32_C0;
    apl_i_v_cast_cast_fu_1664_p3 <= 
        ap_const_lv32_FFFFFF40 when (tmp_39_reg_2976(0) = '1') else 
        ap_const_lv32_C0;
        decis_fu_2031_p1 <= std_logic_vector(resize(signed(tmp_27_reg_3093),32));

    decis_levl_address0 <= tmp_68_i_fu_1187_p1(5 - 1 downto 0);

    -- decis_levl_ce0 assign process. --
    decis_levl_ce0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            decis_levl_ce0 <= ap_const_logic_1;
        else 
            decis_levl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_bph_address0 assign process. --
    delay_bph_address0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_bli_address0, p_01_rec_i1_cast_fu_1813_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            delay_bph_address0 <= p_01_rec_i1_cast_fu_1813_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            delay_bph_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_bph_address0 <= grp_encode_upzero_fu_649_bli_address0;
        else 
            delay_bph_address0 <= "XXX";
        end if; 
    end process;


    -- delay_bph_ce0 assign process. --
    delay_bph_ce0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_bli_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            delay_bph_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_bph_ce0 <= grp_encode_upzero_fu_649_bli_ce0;
        else 
            delay_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bph_d0 <= grp_encode_upzero_fu_649_bli_d0;

    -- delay_bph_we0 assign process. --
    delay_bph_we0_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_bph_we0 <= grp_encode_upzero_fu_649_bli_we0;
        else 
            delay_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_bpl_address0 assign process. --
    delay_bpl_address0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_bli_address0, p_01_rec_i_cast_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            delay_bpl_address0 <= p_01_rec_i_cast_fu_1011_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            delay_bpl_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_bpl_address0 <= grp_encode_upzero_fu_649_bli_address0;
        else 
            delay_bpl_address0 <= "XXX";
        end if; 
    end process;


    -- delay_bpl_ce0 assign process. --
    delay_bpl_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_bli_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            delay_bpl_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_bpl_ce0 <= grp_encode_upzero_fu_649_bli_ce0;
        else 
            delay_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bpl_d0 <= grp_encode_upzero_fu_649_bli_d0;

    -- delay_bpl_we0 assign process. --
    delay_bpl_we0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_bpl_we0 <= grp_encode_upzero_fu_649_bli_we0;
        else 
            delay_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_dhx_address0 assign process. --
    delay_dhx_address0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_dlti_address0, p_01_rec_i1_cast_fu_1813_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            delay_dhx_address0 <= p_01_rec_i1_cast_fu_1813_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            delay_dhx_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_dhx_address0 <= grp_encode_upzero_fu_649_dlti_address0;
        else 
            delay_dhx_address0 <= "XXX";
        end if; 
    end process;

    delay_dhx_address1 <= grp_encode_upzero_fu_649_dlti_address1;

    -- delay_dhx_ce0 assign process. --
    delay_dhx_ce0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_dlti_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            delay_dhx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_dhx_ce0 <= grp_encode_upzero_fu_649_dlti_ce0;
        else 
            delay_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_dhx_ce1 assign process. --
    delay_dhx_ce1_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_dhx_ce1 <= grp_encode_upzero_fu_649_dlti_ce1;
        else 
            delay_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dhx_d0 <= grp_encode_upzero_fu_649_dlti_d0;
    delay_dhx_d1 <= grp_encode_upzero_fu_649_dlti_d1;

    -- delay_dhx_we0 assign process. --
    delay_dhx_we0_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_dhx_we0 <= grp_encode_upzero_fu_649_dlti_we0;
        else 
            delay_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_dhx_we1 assign process. --
    delay_dhx_we1_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50, grp_encode_upzero_fu_649_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            delay_dhx_we1 <= grp_encode_upzero_fu_649_dlti_we1;
        else 
            delay_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_dltx_address0 assign process. --
    delay_dltx_address0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_dlti_address0, p_01_rec_i_cast_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            delay_dltx_address0 <= p_01_rec_i_cast_fu_1011_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            delay_dltx_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_dltx_address0 <= grp_encode_upzero_fu_649_dlti_address0;
        else 
            delay_dltx_address0 <= "XXX";
        end if; 
    end process;

    delay_dltx_address1 <= grp_encode_upzero_fu_649_dlti_address1;

    -- delay_dltx_ce0 assign process. --
    delay_dltx_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_dlti_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            delay_dltx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_dltx_ce0 <= grp_encode_upzero_fu_649_dlti_ce0;
        else 
            delay_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_dltx_ce1 assign process. --
    delay_dltx_ce1_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_dltx_ce1 <= grp_encode_upzero_fu_649_dlti_ce1;
        else 
            delay_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dltx_d0 <= grp_encode_upzero_fu_649_dlti_d0;
    delay_dltx_d1 <= grp_encode_upzero_fu_649_dlti_d1;

    -- delay_dltx_we0 assign process. --
    delay_dltx_we0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_dltx_we0 <= grp_encode_upzero_fu_649_dlti_we0;
        else 
            delay_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- delay_dltx_we1 assign process. --
    delay_dltx_we1_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            delay_dltx_we1 <= grp_encode_upzero_fu_649_dlti_we1;
        else 
            delay_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    el_assign_fu_1134_p2 <= std_logic_vector(unsigned(tmp_4_reg_2774) - unsigned(tmp_7_fu_1122_p2));
    exitcond1_fu_1819_p2 <= "1" when (dlt_pn_rec_i1_reg_628 = ap_const_lv3_5) else "0";
    exitcond2_fu_758_p2 <= "1" when (i_reg_532 = ap_const_lv4_A) else "0";
    exitcond3_fu_1017_p2 <= "1" when (dlt_pn_rec_i_reg_595 = ap_const_lv3_5) else "0";
    exitcond_fu_939_p2 <= "1" when (i_1_reg_574 = ap_const_lv5_16) else "0";
    grp_encode_upzero_fu_649_ap_start <= grp_encode_upzero_fu_649_ap_start_ap_start_reg;

    -- grp_encode_upzero_fu_649_bli_q0 assign process. --
    grp_encode_upzero_fu_649_bli_q0_assign_proc : process(delay_bpl_q0, delay_bph_q0, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st51_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_encode_upzero_fu_649_bli_q0 <= delay_bph_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_encode_upzero_fu_649_bli_q0 <= delay_bpl_q0;
        else 
            grp_encode_upzero_fu_649_bli_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_encode_upzero_fu_649_dlt assign process. --
    grp_encode_upzero_fu_649_dlt_assign_proc : process(tmp_14_reg_2940, ap_sig_cseq_ST_st33_fsm_32, tmp_33_reg_3131, ap_sig_cseq_ST_st51_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_encode_upzero_fu_649_dlt <= tmp_33_reg_3131;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_encode_upzero_fu_649_dlt <= tmp_14_reg_2940;
        else 
            grp_encode_upzero_fu_649_dlt <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_encode_upzero_fu_649_dlti_q0 assign process. --
    grp_encode_upzero_fu_649_dlti_q0_assign_proc : process(delay_dltx_q0, delay_dhx_q0, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st51_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_encode_upzero_fu_649_dlti_q0 <= delay_dhx_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_encode_upzero_fu_649_dlti_q0 <= delay_dltx_q0;
        else 
            grp_encode_upzero_fu_649_dlti_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_encode_upzero_fu_649_dlti_q1 assign process. --
    grp_encode_upzero_fu_649_dlti_q1_assign_proc : process(delay_dltx_q1, delay_dhx_q1, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st51_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_encode_upzero_fu_649_dlti_q1 <= delay_dhx_q1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_encode_upzero_fu_649_dlti_q1 <= delay_dltx_q1;
        else 
            grp_encode_upzero_fu_649_dlti_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1041_ce <= ap_const_logic_1;
    grp_fu_1041_p0 <= al1;
    grp_fu_1041_p1 <= tmp_19_fu_1027_p2;
    grp_fu_1061_ce <= ap_const_logic_1;
    grp_fu_1061_p0 <= al2;
    grp_fu_1061_p1 <= tmp_22_fu_1047_p2;
    grp_fu_1075_ce <= ap_const_logic_1;
    grp_fu_1075_p0 <= reg_692;
    grp_fu_1075_p1 <= reg_688;

    -- grp_fu_1460_ce assign process. --
    grp_fu_1460_ce_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_ap_done, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_1460_ce <= ap_const_logic_1;
        else 
            grp_fu_1460_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1460_p0 <= plt1;
    grp_fu_1460_p1 <= tmp_i5_fu_1452_p1(32 - 1 downto 0);

    -- grp_fu_1470_ce assign process. --
    grp_fu_1470_ce_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_ap_done, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_1470_ce <= ap_const_logic_1;
        else 
            grp_fu_1470_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1470_p0 <= plt2;
    grp_fu_1470_p1 <= tmp_i5_fu_1452_p1(32 - 1 downto 0);

    -- grp_fu_1496_ce assign process. --
    grp_fu_1496_ce_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, grp_encode_upzero_fu_649_ap_done, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34))) then 
            grp_fu_1496_ce <= ap_const_logic_1;
        else 
            grp_fu_1496_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1496_p0 <= reg_696;
    grp_fu_1496_p1 <= reg_700;
    grp_fu_1843_ce <= ap_const_logic_1;
    grp_fu_1843_p0 <= ah1;
    grp_fu_1843_p1 <= tmp_47_fu_1829_p2;
    grp_fu_1863_ce <= ap_const_logic_1;
    grp_fu_1863_p0 <= ah2;
    grp_fu_1863_p1 <= tmp_48_fu_1849_p2;
    grp_fu_1877_ce <= ap_const_logic_1;
    grp_fu_1877_p0 <= reg_700;
    grp_fu_1877_p1 <= reg_696;
    grp_fu_2077_ce <= ap_const_logic_1;
    grp_fu_2077_p0 <= tmp_30_reg_3111;
    grp_fu_2077_p1 <= tmp_34_cast1_reg_3103(32 - 1 downto 0);

    -- grp_fu_2290_ce assign process. --
    grp_fu_2290_ce_assign_proc : process(grp_encode_upzero_fu_649_ap_done, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st53_fsm_52, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) or (ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            grp_fu_2290_ce <= ap_const_logic_1;
        else 
            grp_fu_2290_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2290_p0 <= ph1;
    grp_fu_2290_p1 <= tmp_i10_fu_2282_p1(32 - 1 downto 0);

    -- grp_fu_2300_ce assign process. --
    grp_fu_2300_ce_assign_proc : process(grp_encode_upzero_fu_649_ap_done, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st53_fsm_52, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((not((ap_const_logic_0 = grp_encode_upzero_fu_649_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) or (ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            grp_fu_2300_ce <= ap_const_logic_1;
        else 
            grp_fu_2300_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2300_p0 <= ph2;
    grp_fu_2300_p1 <= tmp_i10_fu_2282_p1(32 - 1 downto 0);
    grp_fu_999_ce <= ap_const_logic_1;
    grp_fu_999_p0 <= reg_692;
    grp_fu_999_p1 <= reg_688;
    h_address0 <= tqmf_ptr_0_rec_cast_fu_752_p1(5 - 1 downto 0);
    h_address1 <= tqmf_ptr_0_sum1_cast_fu_776_p1(5 - 1 downto 0);

    -- h_ce0 assign process. --
    h_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- h_ce1 assign process. --
    h_ce1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_764_p2 <= std_logic_vector(unsigned(i_reg_532) + unsigned(ap_const_lv4_1));
    i_3_fu_945_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_1_reg_574));

    -- ih_assign_phi_fu_642_p4 assign process. --
    ih_assign_phi_fu_642_p4_assign_proc : process(ap_sig_cseq_ST_st46_fsm_45, tmp_29_fu_2039_p3, tmp_28_fu_2034_p2, tmp_24_fu_2020_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then
            if ((ap_const_lv1_0 = tmp_28_fu_2034_p2)) then 
                ih_assign_phi_fu_642_p4 <= tmp_24_fu_2020_p3;
            elsif (not((ap_const_lv1_0 = tmp_28_fu_2034_p2))) then 
                ih_assign_phi_fu_642_p4 <= tmp_29_fu_2039_p3;
            else 
                ih_assign_phi_fu_642_p4 <= "XX";
            end if;
        else 
            ih_assign_phi_fu_642_p4 <= "XX";
        end if; 
    end process;

    il_assign_cast_fu_1228_p1 <= std_logic_vector(resize(unsigned(ril_2_fu_1221_p3),32));

    -- ilb_table_address0 assign process. --
    ilb_table_address0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st47_fsm_46, tmp_i4_fu_1392_p1, tmp_i2_fu_2206_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            ilb_table_address0 <= tmp_i2_fu_2206_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            ilb_table_address0 <= tmp_i4_fu_1392_p1(5 - 1 downto 0);
        else 
            ilb_table_address0 <= "XXXXX";
        end if; 
    end process;


    -- ilb_table_ce0 assign process. --
    ilb_table_ce0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then 
            ilb_table_ce0 <= ap_const_logic_1;
        else 
            ilb_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_2006_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(n_assign_2_fu_1940_p2));
    m_fu_1157_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(el_assign_fu_1134_p2));
    mil_fu_1181_p2 <= std_logic_vector(unsigned(mil_i_reg_606) + unsigned(ap_const_lv5_1));
    n_assign_1_fu_1163_p3 <= 
        m_fu_1157_p2 when (tmp_23_fu_1149_p3(0) = '1') else 
        el_assign_fu_1134_p2;
    n_assign_2_fu_1940_p2 <= std_logic_vector(unsigned(xh) - unsigned(tmp_21_fu_1924_p2));
    n_assign_3_fu_2012_p3 <= 
        m_1_fu_2006_p2 when (tmp_50_fu_1998_p3(0) = '1') else 
        n_assign_2_fu_1940_p2;
    nbh_assign_1_fu_2132_p2 <= std_logic_vector(unsigned(wd_fu_2108_p4) + unsigned(tmp_34_fu_2118_p6));
    nbl_assign_1_fu_1294_p2 <= std_logic_vector(unsigned(tmp_75_i_fu_1280_p4) + unsigned(wl_code_table_load_cast_fu_1290_p1));
    nbl_assign_2_cast_fu_1338_p1 <= std_logic_vector(resize(unsigned(nbl_assign_2_fu_1330_p3),32));
    nbl_assign_2_fu_1330_p3 <= 
        ap_const_lv15_4800 when (tmp_78_i_fu_1324_p2(0) = '1') else 
        tmp_36_fu_1320_p1;
    nbl_assign_3_cast_fu_2176_p1 <= std_logic_vector(resize(unsigned(nbl_assign_3_fu_2168_p3),32));
    nbl_assign_3_fu_2168_p3 <= 
        ap_const_lv15_5800 when (tmp_105_i_fu_2162_p2(0) = '1') else 
        tmp_53_fu_2158_p1;
    p_01_rec_i1_cast_fu_1813_p1 <= std_logic_vector(resize(unsigned(p_01_rec_i1_fu_1807_p2),64));
    p_01_rec_i1_fu_1807_p2 <= std_logic_vector(unsigned(dlt_pn_rec_i1_reg_628) + unsigned(ap_const_lv3_1));
    p_01_rec_i_cast_fu_1011_p1 <= std_logic_vector(resize(unsigned(p_01_rec_i_fu_1005_p2),64));
    p_01_rec_i_fu_1005_p2 <= std_logic_vector(unsigned(dlt_pn_rec_i_reg_595) + unsigned(ap_const_lv3_1));
    p_i1_fu_1677_p3 <= 
        ap_const_lv32_3000 when (tmp_93_i_reg_2992(0) = '1') else 
        apl2_reg_2987;
    p_i2_fu_2150_p3 <= 
        ap_const_lv31_0 when (tmp_52_fu_2142_p3(0) = '1') else 
        tmp_51_fu_2138_p1;
    p_i3_fu_2493_p3 <= 
        ap_const_lv32_3000 when (tmp_93_i1_reg_3169(0) = '1') else 
        apl2_1_reg_3164;
    p_i_fu_1312_p3 <= 
        ap_const_lv31_0 when (tmp_32_fu_1304_p3(0) = '1') else 
        tmp_26_fu_1300_p1;
        p_shl1_cast_fu_724_p1 <= std_logic_vector(resize(signed(p_shl1_fu_716_p3),37));

    p_shl1_fu_716_p3 <= (tqmf_q0 & ap_const_lv2_0);
        p_shl2_cast_fu_867_p1 <= std_logic_vector(resize(signed(p_shl2_fu_859_p3),37));

    p_shl2_fu_859_p3 <= (tqmf_q1 & ap_const_lv4_0);
        p_shl3_cast_fu_879_p1 <= std_logic_vector(resize(signed(p_shl3_fu_871_p3),37));

    p_shl3_fu_871_p3 <= (tqmf_q1 & ap_const_lv2_0);
        p_shl_cast_fu_712_p1 <= std_logic_vector(resize(signed(p_shl_fu_704_p3),37));

    p_shl_fu_704_p3 <= (tqmf_q0 & ap_const_lv4_0);
    p_shl_i1_cast_fu_1594_p1 <= std_logic_vector(resize(unsigned(p_shl_i1_fu_1586_p3),40));
    p_shl_i1_fu_1586_p3 <= (al2 & ap_const_lv7_0);
    p_shl_i2_cast_fu_1644_p1 <= std_logic_vector(resize(unsigned(p_shl_i2_fu_1636_p3),41));
    p_shl_i2_fu_1636_p3 <= (al1 & ap_const_lv8_0);
    p_shl_i3_cast_fu_2098_p1 <= std_logic_vector(resize(unsigned(p_shl_i3_fu_2090_p3),40));
    p_shl_i3_fu_2090_p3 <= (nbh & ap_const_lv7_0);
    p_shl_i4_cast_fu_2410_p1 <= std_logic_vector(resize(unsigned(p_shl_i4_fu_2402_p3),40));
    p_shl_i4_fu_2402_p3 <= (ah2 & ap_const_lv7_0);
    p_shl_i5_cast_fu_2460_p1 <= std_logic_vector(resize(unsigned(p_shl_i5_fu_2452_p3),41));
    p_shl_i5_fu_2452_p3 <= (ah1 & ap_const_lv8_0);
    p_shl_i_cast_fu_1270_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_1262_p3),40));
    p_shl_i_fu_1262_p3 <= (nbl & ap_const_lv7_0);
    p_sum_cast_fu_917_p1 <= std_logic_vector(resize(unsigned(p_sum_fu_911_p2),64));
    p_sum_fu_911_p2 <= std_logic_vector(unsigned(ap_const_lv5_17) + unsigned(tmp_15_fu_907_p1));
    phitmp_fu_782_p2 <= std_logic_vector(unsigned(tqmf_ptr_0_rec_reg_521) + unsigned(ap_const_lv5_2));
    pl_2_fu_1102_p2 <= std_logic_vector(signed(tmp_64_i1_reg_2857) + signed(pl_1_reg_2852));
    pl_5_fu_1904_p2 <= std_logic_vector(signed(tmp_64_i2_reg_3071) + signed(pl_4_reg_3066));
    qq4_code4_table_address0 <= tmp_12_fu_1248_p1(4 - 1 downto 0);

    -- qq4_code4_table_ce0 assign process. --
    qq4_code4_table_ce0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            qq4_code4_table_ce0 <= ap_const_logic_1;
        else 
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    quant26bt_neg_address0 <= tmp_73_i_fu_1215_p1(5 - 1 downto 0);

    -- quant26bt_neg_ce0 assign process. --
    quant26bt_neg_ce0_assign_proc : process(ap_sig_cseq_ST_st28_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            quant26bt_neg_ce0 <= ap_const_logic_1;
        else 
            quant26bt_neg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    quant26bt_pos_address0 <= tmp_73_i_fu_1215_p1(5 - 1 downto 0);

    -- quant26bt_pos_ce0 assign process. --
    quant26bt_pos_ce0_assign_proc : process(ap_sig_cseq_ST_st28_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            quant26bt_pos_ce0 <= ap_const_logic_1;
        else 
            quant26bt_pos_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ril_2_fu_1221_p3 <= 
        quant26bt_neg_q0 when (tmp_23_reg_2867(0) = '1') else 
        quant26bt_pos_q0;
        tmp4_cast_fu_1620_p1 <= std_logic_vector(resize(signed(tmp4_fu_1614_p2),32));

    tmp4_fu_1614_p2 <= std_logic_vector(unsigned(tmp_88_i_cast_cast_fu_1575_p3) + unsigned(tmp_85_i_cast_cast_fu_1571_p1));
        tmp5_cast_fu_2436_p1 <= std_logic_vector(resize(signed(tmp5_fu_2430_p2),32));

    tmp5_fu_2430_p2 <= std_logic_vector(unsigned(tmp_88_i1_cast_cast_fu_2391_p3) + unsigned(tmp_85_i1_cast_cast_fu_2387_p1));
    tmp_101_i1_fu_2541_p2 <= "1" when (signed(apl1_4_reg_3174) > signed(apl1_11_cast_fu_2537_p1)) else "0";
    tmp_101_i_fu_1725_p2 <= "1" when (signed(apl1_reg_2997) > signed(apl1_10_cast_fu_1721_p1)) else "0";
    tmp_102_i1_fu_2567_p2 <= "1" when (signed(wd3_0_apl1_i1_fu_2546_p3) < signed(apl1_8_cast_fu_2563_p1)) else "0";
    tmp_102_i_fu_1751_p2 <= "1" when (signed(wd3_0_apl1_i_fu_1730_p3) < signed(apl1_3_cast_fu_1747_p1)) else "0";
    tmp_105_i_fu_2162_p2 <= "1" when (unsigned(p_i2_fu_2150_p3) > unsigned(ap_const_lv31_5800)) else "0";
        tmp_10_cast_fu_822_p1 <= std_logic_vector(resize(signed(tmp_s_reg_2716),50));

    tmp_10_fu_1200_p4 <= tmp_70_i_fu_1195_p2(46 downto 15);
    tmp_11_fu_1238_p4 <= ril_2_fu_1221_p3(5 downto 2);
    tmp_12_fu_1248_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_1238_p4),64));
    tmp_13_fu_1371_p0 <= tmp_i2_cast_reg_2877(32 - 1 downto 0);
    tmp_13_fu_1371_p1 <= qq4_code4_table_load_reg_2925;
    tmp_13_fu_1371_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_13_fu_1371_p0) * signed(tmp_13_fu_1371_p1))), 47));
    tmp_14_fu_1376_p4 <= tmp_13_fu_1371_p2(46 downto 15);
    tmp_15_fu_907_p1 <= tqmf_ptr_0_pn_rec_reg_563(5 - 1 downto 0);
    tmp_16_fu_1396_p2 <= std_logic_vector(unsigned(tmp_14_fu_1376_p4) + unsigned(tmp_63_i_reg_2862));
    tmp_17_fu_1540_p4 <= al1(31 downto 5);
        tmp_18_fu_1550_p1 <= std_logic_vector(resize(signed(tmp_17_fu_1540_p4),28));

    tmp_19_fu_1027_p2 <= std_logic_vector(shift_left(unsigned(rlt1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_1_fu_951_p2 <= std_logic_vector(unsigned(xa_1_cast1_reg_2731) + unsigned(xb_1_cast1_reg_2741));
    tmp_20_fu_1783_p2 <= std_logic_vector(unsigned(dlt) + unsigned(sl));
    tmp_21_fu_1924_p2 <= std_logic_vector(unsigned(tmp_66_i2_fu_1908_p4) + unsigned(tmp_63_i2_fu_1888_p4));
    tmp_22_fu_1047_p2 <= std_logic_vector(shift_left(unsigned(rlt2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_23_fu_1149_p3 <= el_assign_fu_1134_p2(31 downto 31);
    tmp_24_fu_2020_p3 <= 
        ap_const_lv2_1 when (tmp_49_reg_3081(0) = '1') else 
        ap_const_lv2_3;
    tmp_25_fu_1982_p1 <= deth;
    tmp_25_fu_1982_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv42_234) * signed(tmp_25_fu_1982_p1))), 42));
    tmp_26_fu_1300_p1 <= nbl_assign_1_fu_1294_p2(31 - 1 downto 0);
    tmp_28_fu_2034_p2 <= "1" when (signed(n_assign_3_reg_3098) > signed(decis_fu_2031_p1)) else "0";
    tmp_29_fu_2039_p3 <= 
        ap_const_lv2_0 when (tmp_49_reg_3081(0) = '1') else 
        ap_const_lv2_2;
        tmp_2_cast_fu_813_p1 <= std_logic_vector(resize(signed(tmp_2_reg_2711),50));

    tmp_2_fu_795_p0 <= h_load_reg_2696;
    tmp_2_fu_795_p1 <= reg_684;
    tmp_2_fu_795_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_2_fu_795_p0) * signed(tmp_2_fu_795_p1))), 46));
    tmp_30_fu_2060_p1 <= ap_const_lv32_FFFFE310;
    tmp_30_fu_2060_p2 <= ap_const_lv32_FFFFF9B0;
    tmp_30_fu_2060_p3 <= ap_const_lv32_1CF0;
    tmp_30_fu_2060_p4 <= ap_const_lv32_650;
    tmp_30_fu_2060_p5 <= ih_assign_phi_fu_642_p4;
    tmp_32_fu_1304_p3 <= nbl_assign_1_fu_1294_p2(31 downto 31);
    tmp_33_cast_cast_fu_1960_p3 <= 
        ap_const_lv32_1 when (tmp_49_fu_1952_p3(0) = '1') else 
        ap_const_lv32_3;
        tmp_34_cast1_fu_2028_p1 <= std_logic_vector(resize(signed(deth),47));

    tmp_34_fu_2118_p1 <= ap_const_lv32_31E;
    tmp_34_fu_2118_p2 <= ap_const_lv32_FFFFFF2A;
    tmp_34_fu_2118_p3 <= ap_const_lv32_31E;
    tmp_34_fu_2118_p4 <= ap_const_lv32_FFFFFF2A;
    tmp_34_fu_2118_p5 <= ih_assign_reg_639;
    tmp_35_fu_2260_p2 <= std_logic_vector(unsigned(tmp_63_i2_reg_3076) + unsigned(tmp_33_reg_3131));
    tmp_36_fu_1320_p1 <= p_i_fu_1312_p3(15 - 1 downto 0);
    tmp_37_fu_2356_p4 <= ah1(31 downto 5);
    tmp_38_cast_cast_fu_2047_p3 <= 
        ap_const_lv32_0 when (tmp_49_reg_3081(0) = '1') else 
        ap_const_lv32_2;
    tmp_38_fu_2599_p2 <= std_logic_vector(unsigned(sh) + unsigned(dh));
    tmp_3_fu_903_p1 <= xb_1_fu_893_p2(47 - 1 downto 0);
        tmp_41_fu_2366_p1 <= std_logic_vector(resize(signed(tmp_37_fu_2356_p4),28));

    tmp_42_fu_1554_p4 <= wd2_1_fu_1534_p2(34 downto 7);
    tmp_43_fu_1564_p3 <= 
        tmp_18_fu_1550_p1 when (tmp_39_reg_2976(0) = '1') else 
        tmp_42_fu_1554_p4;
    tmp_45_fu_1683_p1 <= p_i1_fu_1677_p3(15 - 1 downto 0);
    tmp_46_fu_1737_p1 <= wd3_0_apl1_i_fu_1730_p3(16 - 1 downto 0);
    tmp_47_fu_1829_p2 <= std_logic_vector(shift_left(unsigned(rh1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_48_fu_1849_p2 <= std_logic_vector(shift_left(unsigned(rh2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_49_fu_1952_p3 <= n_assign_2_fu_1940_p2(31 downto 31);
    tmp_50_fu_1998_p3 <= n_assign_2_fu_1940_p2(31 downto 31);
    tmp_51_fu_2138_p1 <= nbh_assign_1_fu_2132_p2(31 - 1 downto 0);
    tmp_52_fu_2142_p3 <= nbh_assign_1_fu_2132_p2(31 downto 31);
    tmp_53_fu_2158_p1 <= p_i2_fu_2150_p3(15 - 1 downto 0);
    tmp_55_fu_2370_p4 <= wd2_3_fu_2350_p2(34 downto 7);
    tmp_56_fu_2380_p3 <= 
        tmp_41_fu_2366_p1 when (tmp_54_reg_3153(0) = '1') else 
        tmp_55_fu_2370_p4;
    tmp_58_fu_2499_p1 <= p_i3_fu_2493_p3(15 - 1 downto 0);
    tmp_59_fu_2553_p1 <= wd3_0_apl1_i1_fu_2546_p3(16 - 1 downto 0);
    tmp_5_fu_971_p2 <= std_logic_vector(unsigned(tmp_reg_2736) - unsigned(tmp_3_reg_2746));
    tmp_60_fu_2631_p2 <= std_logic_vector(shift_left(unsigned(ih),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_63_i2_fu_1888_p4 <= zl1_i1_reg_618(45 downto 14);
    tmp_63_i_fu_1086_p4 <= zl1_i_reg_585(45 downto 14);
    tmp_66_i1_fu_1106_p4 <= pl_2_fu_1102_p2(46 downto 15);
    tmp_66_i2_fu_1908_p4 <= pl_5_fu_1904_p2(46 downto 15);
    tmp_67_i_fu_1175_p2 <= "1" when (unsigned(mil_i_reg_606) < unsigned(ap_const_lv5_1E)) else "0";
    tmp_68_i_fu_1187_p1 <= std_logic_vector(resize(unsigned(mil_i_reg_606),64));
        tmp_6_cast_fu_841_p1 <= std_logic_vector(resize(signed(tmp_6_fu_835_p2),50));

    tmp_6_fu_835_p1 <= reg_684;
    tmp_6_fu_835_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(ap_const_lv39_7FFFFFFFD4) * signed(tmp_6_fu_835_p1))), 39));
    tmp_70_i_fu_1195_p0 <= tmp_70_i_fu_1195_p00(15 - 1 downto 0);
    tmp_70_i_fu_1195_p00 <= std_logic_vector(resize(unsigned(decis_levl_load_reg_2897),47));
    tmp_70_i_fu_1195_p1 <= tmp_i2_cast_reg_2877(32 - 1 downto 0);
    tmp_70_i_fu_1195_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_70_i_fu_1195_p0) * signed(tmp_70_i_fu_1195_p1))), 47));
    tmp_71_i_fu_1210_p2 <= "1" when (signed(n_assign_1_reg_2872) > signed(tmp_10_fu_1200_p4)) else "0";
    tmp_73_i_fu_1215_p1 <= std_logic_vector(resize(unsigned(mil_i_reg_606),64));
    tmp_75_i_fu_1280_p4 <= tmp_i3_fu_1274_p2(38 downto 7);
    tmp_78_i_fu_1324_p2 <= "1" when (unsigned(p_i_fu_1312_p3) > unsigned(ap_const_lv31_4800)) else "0";
    tmp_7_fu_1122_p2 <= std_logic_vector(unsigned(tmp_66_i1_fu_1106_p4) + unsigned(tmp_63_i_fu_1086_p4));
    tmp_80_i1_cast_cast_fu_2216_p1 <= std_logic_vector(resize(unsigned(tmp_80_i1_fu_2211_p2),12));
    tmp_80_i1_fu_2211_p2 <= std_logic_vector(signed(ap_const_lv4_B) - signed(wd2_4_cast_reg_3121));
    tmp_80_i_cast_cast_fu_1412_p1 <= std_logic_vector(resize(unsigned(tmp_80_i_fu_1407_p2),12));
    tmp_80_i_fu_1407_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(wd2_cast_reg_2935));
    tmp_81_i1_cast_fu_2234_p1 <= std_logic_vector(resize(unsigned(tmp_81_i1_fu_2226_p3),32));
    tmp_81_i1_fu_2226_p3 <= (wd3_2_fu_2220_p2 & ap_const_lv3_0);
    tmp_81_i_cast_fu_1430_p1 <= std_logic_vector(resize(unsigned(tmp_81_i_fu_1422_p3),32));
    tmp_81_i_fu_1422_p3 <= (wd3_fu_1416_p2 & ap_const_lv3_0);
        tmp_85_i1_cast_cast_fu_2387_p1 <= std_logic_vector(resize(signed(tmp_56_fu_2380_p3),29));

        tmp_85_i_cast_cast_fu_1571_p1 <= std_logic_vector(resize(signed(tmp_43_fu_1564_p3),29));

    tmp_88_i1_cast_cast_fu_2391_p3 <= 
        ap_const_lv29_1FFFFF80 when (tmp_57_reg_3159(0) = '1') else 
        ap_const_lv29_80;
    tmp_88_i_cast_cast_fu_1575_p3 <= 
        ap_const_lv29_1FFFFF80 when (tmp_44_reg_2982(0) = '1') else 
        ap_const_lv29_80;
        tmp_89_i1_cast7_fu_2398_p1 <= std_logic_vector(resize(signed(ah2),40));

        tmp_89_i_cast_fu_1582_p1 <= std_logic_vector(resize(signed(al2),40));

    tmp_90_i1_fu_2414_p2 <= std_logic_vector(unsigned(p_shl_i4_cast_fu_2410_p1) - unsigned(tmp_89_i1_cast7_fu_2398_p1));
    tmp_90_i_fu_1598_p2 <= std_logic_vector(unsigned(p_shl_i1_cast_fu_1594_p1) - unsigned(tmp_89_i_cast_fu_1582_p1));
    tmp_91_i1_cast_cast_fu_2420_p4 <= tmp_90_i1_fu_2414_p2(38 downto 7);
    tmp_91_i_cast_cast_fu_1604_p4 <= tmp_90_i_fu_1598_p2(38 downto 7);
    tmp_93_i1_fu_2446_p2 <= "1" when (signed(apl2_1_fu_2440_p2) > signed(ap_const_lv32_3000)) else "0";
    tmp_93_i_fu_1630_p2 <= "1" when (signed(apl2_fu_1624_p2) > signed(ap_const_lv32_3000)) else "0";
    tmp_94_i1_fu_2503_p2 <= "1" when (signed(p_i3_fu_2493_p3) < signed(ap_const_lv32_FFFFD000)) else "0";
    tmp_94_i_fu_1687_p2 <= "1" when (signed(p_i1_fu_1677_p3) < signed(ap_const_lv32_FFFFD000)) else "0";
    tmp_99_i1_fu_2470_p4 <= tmp_i11_fu_2464_p2(39 downto 8);
    tmp_99_i_fu_1654_p4 <= tmp_i6_fu_1648_p2(39 downto 8);
        tmp_9_cast_fu_889_p1 <= std_logic_vector(resize(signed(tmp_9_fu_883_p2),50));

    tmp_9_fu_883_p2 <= std_logic_vector(signed(p_shl2_cast_fu_867_p1) - signed(p_shl3_cast_fu_879_p1));
    tmp_fu_855_p1 <= xa_1_fu_845_p2(47 - 1 downto 0);
        tmp_i10_fu_2282_p1 <= std_logic_vector(resize(signed(ph),64));

        tmp_i11_cast8_fu_2334_p1 <= std_logic_vector(resize(signed(ah1),41));

    tmp_i11_fu_2464_p2 <= std_logic_vector(unsigned(p_shl_i5_cast_fu_2460_p1) - unsigned(tmp_i11_cast8_fu_2334_p1));
        tmp_i2_cast_26_fu_1258_p1 <= std_logic_vector(resize(signed(nbl),40));

        tmp_i2_cast_fu_1171_p1 <= std_logic_vector(resize(signed(detl),47));

    tmp_i2_fu_2206_p1 <= std_logic_vector(resize(unsigned(wd1_1_fu_2186_p4),64));
    tmp_i3_fu_1274_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_1270_p1) - unsigned(tmp_i2_cast_26_fu_1258_p1));
        tmp_i4_cast1_fu_1518_p1 <= std_logic_vector(resize(signed(al1),41));

    tmp_i4_fu_1392_p1 <= std_logic_vector(resize(unsigned(wd1_reg_2930),64));
        tmp_i5_fu_1452_p1 <= std_logic_vector(resize(signed(plt),64));

    tmp_i6_fu_1648_p2 <= std_logic_vector(unsigned(p_shl_i2_cast_fu_1644_p1) - unsigned(tmp_i4_cast1_fu_1518_p1));
        tmp_i9_cast_fu_2086_p1 <= std_logic_vector(resize(signed(nbh),40));

    tmp_i9_fu_2102_p2 <= std_logic_vector(unsigned(p_shl_i3_cast_fu_2098_p1) - unsigned(tmp_i9_cast_fu_2086_p1));
    tmp_s_fu_807_p0 <= h_ptr_load_reg_2706;
    tmp_s_fu_807_p1 <= tqmf_ptr_load_reg_2701;
    tmp_s_fu_807_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_s_fu_807_p0) * signed(tmp_s_fu_807_p1))), 46));

    -- tqmf_address0 assign process. --
    tqmf_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_758_p2, ap_sig_cseq_ST_st10_fsm_9, tqmf_ptr_0_rec_cast_fu_752_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond2_fu_758_p2 = ap_const_lv1_0)))) then 
            tqmf_address0 <= ap_const_lv5_16;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_758_p2 = ap_const_lv1_0))) then 
            tqmf_address0 <= tqmf_ptr_0_rec_cast_fu_752_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            tqmf_address0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            tqmf_address0 <= ap_const_lv5_1;
        else 
            tqmf_address0 <= "XXXXX";
        end if; 
    end process;


    -- tqmf_address1 assign process. --
    tqmf_address1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st4_fsm_3, tqmf_addr_2_reg_2751, ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_939_p2, ap_sig_cseq_ST_st11_fsm_10, tqmf_ptr_0_sum1_cast_fu_776_p1, tqmf_ptr_0_sum_cast_fu_934_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            tqmf_address1 <= tqmf_addr_2_reg_2751;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_939_p2)))) then 
            tqmf_address1 <= ap_const_lv5_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_fu_939_p2))) then 
            tqmf_address1 <= tqmf_ptr_0_sum_cast_fu_934_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            tqmf_address1 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            tqmf_address1 <= tqmf_ptr_0_sum1_cast_fu_776_p1(5 - 1 downto 0);
        else 
            tqmf_address1 <= "XXXXX";
        end if; 
    end process;


    -- tqmf_ce0 assign process. --
    tqmf_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_758_p2, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_758_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond2_fu_758_p2 = ap_const_lv1_0))))) then 
            tqmf_ce0 <= ap_const_logic_1;
        else 
            tqmf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tqmf_ce1 assign process. --
    tqmf_ce1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_939_p2, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_939_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_fu_939_p2)))) then 
            tqmf_ce1 <= ap_const_logic_1;
        else 
            tqmf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tqmf_d0 <= xin2;

    -- tqmf_d1 assign process. --
    tqmf_d1_assign_proc : process(xin1, tqmf_q1, ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_939_p2, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            tqmf_d1 <= tqmf_q1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_939_p2)))) then 
            tqmf_d1 <= xin1;
        else 
            tqmf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tqmf_ptr1_0_rec_fu_922_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(tqmf_ptr_0_pn_rec_reg_563));
    tqmf_ptr_0_rec_cast_fu_752_p1 <= std_logic_vector(resize(unsigned(tqmf_ptr_0_rec_reg_521),64));
    tqmf_ptr_0_sum1_cast_fu_776_p1 <= std_logic_vector(resize(unsigned(tqmf_ptr_0_sum1_fu_770_p2),64));
    tqmf_ptr_0_sum1_fu_770_p2 <= (tqmf_ptr_0_rec_reg_521 or ap_const_lv5_1);
    tqmf_ptr_0_sum_cast_fu_934_p1 <= std_logic_vector(resize(unsigned(tqmf_ptr_0_sum_fu_928_p2),64));
    tqmf_ptr_0_sum_fu_928_p2 <= std_logic_vector(unsigned(ap_const_lv6_15) + unsigned(tqmf_ptr_0_pn_rec_reg_563));

    -- tqmf_we0 assign process. --
    tqmf_we0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_939_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_939_p2))))) then 
            tqmf_we0 <= ap_const_logic_1;
        else 
            tqmf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tqmf_we1 assign process. --
    tqmf_we1_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_939_p2, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_939_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            tqmf_we1 <= ap_const_logic_1;
        else 
            tqmf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    wd1_1_fu_2186_p4 <= nbl_assign_3_fu_2168_p3(10 downto 6);
        wd2_1_cast_fu_1530_p1 <= std_logic_vector(resize(signed(wd2_fu_1522_p3),35));

    wd2_1_fu_1534_p2 <= std_logic_vector(unsigned(ap_const_lv35_0) - unsigned(wd2_1_cast_fu_1530_p1));
    wd2_2_fu_2338_p3 <= (ah1 & ap_const_lv2_0);
    wd2_3_fu_2350_p2 <= std_logic_vector(unsigned(ap_const_lv35_0) - unsigned(wd2_5_cast_fu_2346_p1));
        wd2_5_cast_fu_2346_p1 <= std_logic_vector(resize(signed(wd2_2_fu_2338_p3),35));

    wd2_fu_1522_p3 <= (al1 & ap_const_lv2_0);
    wd3_0_apl1_i1_fu_2546_p3 <= 
        apl1_11_cast_fu_2537_p1 when (tmp_101_i1_fu_2541_p2(0) = '1') else 
        apl1_4_reg_3174;
    wd3_0_apl1_i_fu_1730_p3 <= 
        apl1_10_cast_fu_1721_p1 when (tmp_101_i_fu_1725_p2(0) = '1') else 
        apl1_reg_2997;
    wd3_2_fu_2220_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & tmp_80_i1_cast_cast_fu_2216_p1(12-1 downto 0)))));
    wd3_fu_1416_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & tmp_80_i_cast_cast_fu_1412_p1(12-1 downto 0)))));
    wd_fu_2108_p4 <= tmp_i9_fu_2102_p2(38 downto 7);
    wl_code_table_address0 <= tmp_12_fu_1248_p1(4 - 1 downto 0);

    -- wl_code_table_ce0 assign process. --
    wl_code_table_ce0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            wl_code_table_ce0 <= ap_const_logic_1;
        else 
            wl_code_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        wl_code_table_load_cast_fu_1290_p1 <= std_logic_vector(resize(signed(wl_code_table_q0),32));

    xa_1_cast1_fu_851_p1 <= std_logic_vector(resize(unsigned(xa_1_fu_845_p2),51));
    xa_1_fu_845_p2 <= std_logic_vector(unsigned(xa1_reg_543) + unsigned(tmp_6_cast_fu_841_p1));
    xa_2_fu_816_p2 <= std_logic_vector(signed(tmp_2_cast_fu_813_p1) + signed(xa1_reg_543));
        xa_cast_fu_734_p1 <= std_logic_vector(resize(signed(xa_fu_728_p2),50));

    xa_fu_728_p2 <= std_logic_vector(signed(p_shl_cast_fu_712_p1) - signed(p_shl1_cast_fu_724_p1));
    xb_1_cast1_fu_899_p1 <= std_logic_vector(resize(unsigned(xb_1_fu_893_p2),51));
    xb_1_fu_893_p2 <= std_logic_vector(unsigned(xb1_reg_553) + unsigned(tmp_9_cast_fu_889_p1));
    xb_2_fu_825_p2 <= std_logic_vector(signed(tmp_10_cast_fu_822_p1) + signed(xb1_reg_553));
        xb_cast_fu_748_p1 <= std_logic_vector(resize(signed(xb_fu_742_p2),50));

    xb_fu_742_p0 <= reg_684;
    xb_fu_742_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(xb_fu_742_p0) * signed(ap_const_lv39_7FFFFFFFD4))), 39));
    zl_1_fu_1081_p2 <= std_logic_vector(signed(tmp_66_i_reg_2842) + signed(zl1_i_reg_585));
    zl_3_fu_1883_p2 <= std_logic_vector(signed(tmp_66_i3_reg_3056) + signed(zl1_i1_reg_618));
end behav;
